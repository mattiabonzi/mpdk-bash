#!/usr/bin/env bash

# MPDK written by Mattia Bonzi <mattia@mattiabonzi.it>
# Utility script for the development of Moodle's plugin
# Use at your own risk.

VERSION="0.2.0 (Beta)"
#This file
THISFILE=$( readlink "${BASH_SOURCE[0]}" ) || THISFILE="${BASH_SOURCE[0]}"
#MPDK root (our home)
export MPDK_ROOT="$( cd "$( dirname "$THISFILE" )" && pwd -P )"
#Asset root 
ASSET=$MPDK_ROOT/.asset
#Instance root (NULL if not passed via optoins "-i")
IROOT=""
#Default instance web port
WEBPORT=8000
#Default instance database port
DBPORT=8001
#L#Eventually load the config file
[ -f "$ASSET/config" ] && source $ASSET/config
#Eventually load the own created plugin list
[ -f "$ASSET/myplugin" ] && MYPLUGIN="$(cat $ASSET/myplugin)"
#Load functions
for func in $(ls $ASSET/functions);do
    source $ASSET/functions/$func
done
#Load getoptions (github.com/ko1nksm/getoptions)
source $ASSET/getoptions.sh

# shellcheck disable=SC1083
mpdk_parser_definition() {
	setup   OARGS help:usage abbr:true width:"35,18" no:'0' -- '' "Usage: mpdk [global options...] <command> [options...] [arguments...]"
	msg -- 'Moodle Plugin Development Kit (wrapper for github.com/moodlehq/moodle-docker)'
	msg -- '' 'Global Options:'
	flag NON_INTERACTIVE -c --non-interactive init:@no -- "Do not ask for value to input, use only provided arguent"
	param INSTANCE_NAME -n --name -- "Name of an existing instance to select (alternative to -i)"
	param INSTANCE_ROOT -i --instance -- "Path to an existing instance to select (alternative to -n)" 
	disp :usage -h --help -- "Display this screen"
	disp :mpdk_extendedhelp -H --exthelp -- "Open documentaion (requires a connection)"
	disp VERSION --version -- "Show installed version"

	msg -- '' "Commands:"
	cmd install -- "Install the enviroment and download dependencies (execute just one time)"
	cmd drop hidden:true -- "(DO NOT USE) Delete all data and file from this mpdk installation"
	cmd new -- "Create a new instance"
	cmd run -- "Run (and init if necessary) the instance"
	cmd init -- "Init an instance"
	cmd stop -- "Stop the instance, but retain the data (docker-compose stop)"
	cmd down -- "Stop the instance, and discard the data (docker-compose down)"
	cmd remove -- "Remove (delete) the instance codebase"
	cmd test -- "Execute all or the specified PhpUnit/Behat test"
	cmd sniff -- "Execute PhpCS and/or Grunt ESlint for the specified plugins\nIt only works with registered plugin, see 'addplugin'"
	cmd sh -- "Execute commands inside the container\nShortcut for 'docker exec {container-name} bash -l -c <commands>'"
	cmd ps -- "Show the list of running docker container for the instance"
	cmd newplugin -- "Interactivly create a new plugin structure with tool_pluginskel\nRefers to tool_pluginskel documentation for help with the recipe"
	cmd addplugin -- "Add a plugin to the registered plugins list (for code checking and version management)"
	cmd myplugin -- "Show a list of registered plugin and their installed versions on every instance"
    msg -- '' 'Run "mpdk <command> help" for help on specif command' ''
}

eval "$(getoptions mpdk_parser_definition parse)"
parse "$@"
eval "set -- $OARGS"

#If the instance root is NOT defined, try first to find it then to guess it
if [ -z "$IROOT" ]; then
    if [ -n "$INSTANCE_NAME" ]; then 
        IROOT="$MPDK_ROOT/${INSTANCE_NAME}/moodle";
    elif [ -n "$INSTANCE_ROOT" ]; then
        IROOT="$INSTANCE_ROOT"
    elif [ -f $(pwd)"/.mpdkinstance" ]; then
        IROOT=$(pwd)
    elif [ -f $(pwd)"/moodle/.mpdkinstance" ]; then
        IROOT=$(pwd)"/moodle"
    else
        back="../"
        for (( i=1; i<=20; i++ ));do
            p="$(realpath $(pwd)"/$back")"
            if [ -f "$p/.mpdkinstance" ];then
                IROOT="$p";break
            fi
            if [ -f "$p/moodle/.mpdkinstance" ]; then
                IROOT="$p/moodle";break
            fi
            back+='../'
        done
    fi
fi

#If the instance root is defined, export ENV needed by moodle-docker
if  [ -n "$IROOT" ];then
    [ "${IROOT:${#IROOT}-1:1}" != '/' ] && IROOT+='/'
    mpdk_requireinstance
    export MOODLE_DOCKER_WWWROOT=$IROOT
    export MOODLE_DOCKER_DB=pgsql
    export COMPOSE_PROJECT_NAME="$(basename "$(dirname $IROOT)")"
    #Eventually load the instance env file
    [ -f "$MPDK_ROOT/env" ] && source $MPDK_ROOT/env
fi
export MOODLE_DOCKER_PHP_VERSION=8.0
#Eventually load the global env file
[ -f "$MPDK_ROOT/env" ] && source $MPDK_ROOT/env
#Parse command

case $1 in
    new ) mpdk_new $@ & mpdk_spinner $!;exit;;
    download-moodle ) mpdk_download_moodle $@;exit;;
    install ) mpdk_install $@;exit;;
    drop ) mpdk_drop $@;exit;;
    newplugin ) mpdk_newplugin $@;exit;;
    myplugin ) mpdk_myplugin $@;exit;;
    addplugin ) mpdk_addplugin $@;exit;;
    stop ) mpdk_downstopremove -s $@;exit;;
    down ) mpdk_downstopremove $@;exit;;
    remove ) mpdk_downstopremove -r $@;exit;;
    ps ) mpdk_ps $@;exit;exit;;
    init ) mpdk_init $@;exit;;
    run ) mpdk_run $@;;
    test ) mpdk_test $@;;
    sh ) mpdk_sh $@;;
    sniff ) mpdk_sniff $@;;
    * ) mpdk_usage;;
esac