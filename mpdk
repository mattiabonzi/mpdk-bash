#!/usr/bin/env bash
# Copyright (C) 2022 Mattia Bonzi <mattia@mattiabonzi.it>
# 
# This file is part of Mpdk.
# 
# Mpdk is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Mpdk is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Mpdk.  If not, see <http://www.gnu.org/licenses/>.

# shellcheck disable=SC2034
MPDK_VERSION="0.2.0 (Beta)"
#This file
THISFILE=$( readlink "${BASH_SOURCE[0]}" ) || THISFILE="${BASH_SOURCE[0]}"
#MPDK root (our home)
MPDK_ROOT="$( cd "$( dirname "$THISFILE" )" && pwd -P )"
#Asset root 
ASSET=$MPDK_ROOT/.asset
#Instance root (NULL if not passed via optoins "-i")
IROOT=""
#Default instance web port
# shellcheck disable=SC2034
WEBPORT=8000
#Default instance database port
# shellcheck disable=SC2034
DBPORT=8001
#L#Eventually load the config file
# shellcheck source=/dev/null
[ -f "$ASSET/config" ] && source "$ASSET/config"
#Eventually load the own created plugin lis
# shellcheck disable=SC2034
[ -f "$ASSET/myplugin" ] && MYPLUGIN="$(cat "$ASSET"/myplugin)"
#Load getoptions (github.com/ko1nksm/getoptions)
# shellcheck source=.asset/lib/getoptions.sh
source "$ASSET"/lib/getoptions.sh
#Load functions
for func in "$ASSET"/functions/*;do
    # shellcheck source=/dev/null
    source "$func"
done
#Load user defined functions
if [ -d "$ASSET"/userfunctions/ ];then
    for func in "$ASSET"/userfunctions/*;do
        # shellcheck source=/dev/null
        source "$func"
    done
fi

trap 'kill $(jobs -p) 2>&1 > /dev/null; wait; echo "Cancelling...!";' SIGINT SIGTERM

# shellcheck disable=SC1083,SC2317
mpdk_parser_definition() {
	setup   OARGS help:usage abbr:true width:"35,18" -- '' "Usage: mpdk [global options...] <command> [options...] [arguments...]"
	msg -- 'Moodle Plugin Development Kit (wrapper for github.com/moodlehq/moodle-docker)'
	msg -- '' 'Global Options:'
	flag NON_INTERACTIVE -c --non-interactive init:@no -- "Do not ask to input input, use only provided options"
	param INSTANCE_NAME -n --name -- "Name of an existing instance to select (alternative to -i)"
	param INSTANCE_ROOT -i --instance -- "Path to an existing instance to select (alternative to -n)" 
	disp :usage -h --help -- "Display this screen"
	disp :mpdk_extendedhelp -H --exthelp -- "Open documentaion (requires a connection)"
	disp VERSION -v --version -- "Show installed version"

	msg -- '' "Commands:"
	cmd install -- "Install the enviroment and download dependencies (execute just one time)"
	cmd drop hidden:true -- "(DO NOT USE) Delete all data and file from this mpdk installation"
	cmd new -- "Create a new instance"
	cmd run -- "Run (and init if necessary) the instance"
	cmd init -- "Init an instance"
	cmd stop -- "Stop the instance, but retain the data (docker-compose stop)"
	cmd down -- "Stop the instance, and discard the data (docker-compose down)"
	cmd remove -- "Remove (delete) the instance codebase"
	cmd test -- "Execute all or the specified PhpUnit/Behat test"
	cmd sniff -- "Execute PhpCS and/or Grunt ESlint for the specified plugins\nIt only works with registered plugin, see 'addplugin'"
	cmd ex -- "Execute commands inside the container\nShortcut for 'docker exec {container-name} bash -l -c <commands>'"
	cmd ps -- "Show the list of running docker container for the instance"
	cmd newplugin -- "Interactivly create a new plugin structure with tool_pluginskel\nRefers to tool_pluginskel documentation for help with the recipe"
	cmd addplugin -- "Add a plugin to the registered plugins list (for code checking and version management)"
	cmd myplugin -- "Show a list of registered plugin and their installed versions on every instance"
    cmd download-moodle -- "Download specified (or latest) Moodle core version"
    msg -- '' 'Run "mpdk <command> help" for help on specif command' ''
}

eval "$(getoptions mpdk_parser_definition parse)"
parse "$@"
eval "set -- $OARGS"

#If the instance root is NOT defined, try first to find it then to guess it
if [ -z "$IROOT" ]; then
    if [ -n "$INSTANCE_NAME" ]; then 
        IROOT="$MPDK_ROOT/${INSTANCE_NAME}/moodle";
    elif [ -n "$INSTANCE_ROOT" ]; then
        IROOT="$INSTANCE_ROOT"
    elif [ -f "$(pwd)/.mpdkinstance" ]; then
        IROOT=$(pwd)
    elif [ -f "$(pwd)/moodle/.mpdkinstance" ]; then
        IROOT="$(pwd)/moodle"
    else
        back="../"
        for (( i=1; i<=20; i++ ));do
            p="$(realpath "$(pwd)/$back")"
            if [ -f "$p/.mpdkinstance" ];then
                IROOT="$p";break
            fi
            if [ -f "$p/moodle/.mpdkinstance" ]; then
                IROOT="$p/moodle";break
            fi
            back+='../'
        done
    fi
fi


#If the instance root is defined, export ENV needed by moodle-docker
if  [ -n "$IROOT" ];then
    [ "${IROOT:${#IROOT}-1:1}" != '/' ] && IROOT+='/'
    mpdk_requireinstance
    MOODLE_DOCKER_WWWROOT=$IROOT
    MOODLE_DOCKER_DB=pgsql
    COMPOSE_PROJECT_NAME="$(basename "$(dirname "$IROOT")")"
    export MOODLE_DOCKER_WWWROOT
    export MOODLE_DOCKER_DB
    export COMPOSE_PROJECT_NAME
    #Eventually load the instance env file
    # shellcheck source=/dev/null
    [ -f "$IROOT/../env" ] && source "$IROOT/../env"
fi
export MOODLE_DOCKER_PHP_VERSION=8.0
#Eventually load the global env file
# shellcheck source=/dev/null
[ -f "$MPDK_ROOT/env" ] && source "$MPDK_ROOT/env"
#Parse command

case $1 in
    new ) mpdk_new "$@" & mpdk_spinner $!;exit 0;;
    download-moodle ) mpdk_download_moodle "$@";exit 0;;
    install ) mpdk_install "$@";exit 0;;
    drop ) mpdk_drop "$@";exit 0;;
    newplugin ) mpdk_newplugin "$@";exit 0;;
    myplugin ) mpdk_myplugin "$@";exit 0;;
    addplugin ) mpdk_addplugin "$@";exit 0;;
    stop ) mpdk_stop "$@";exit 0;;
    down ) mpdk_down "$@";exit 0;;
    remove ) mpdk_remove -r "$@";exit 0;;
    ps ) mpdk_ps "$@";exit 0;;
    init ) mpdk_init "$@";exit 0;;
    run ) mpdk_run "$@";exit 0;;
    test ) mpdk_test "$@";exit 0;;
    ex ) mpdk_ex "$@";exit 0;;
    sniff ) mpdk_sniff "$@";exit 0;;
    * ) mpdk_usage;exit 0;;
esac