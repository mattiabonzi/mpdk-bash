# Copyright (C) 2022 Mattia Bonzi <mattia@mattiabonzi.it>
# 
# This file is part of Mpdk.
# 
# Mpdk is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Mpdk is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Mpdk.  If not, see <http://www.gnu.org/licenses/>.



mpdk_parser_definition_newplugin() {
	setup   OARGS help:usage abbr:true -- '' "Usage: mpdk new [Options...] <name>"
	msg -- 'Interactivly create a new plugin using tool_pluginskel'
    msg -- 'See github.comn/mudrd8mz/moodle-tool_pluginskel for help with the recipe'
    msg -- 'Use the interactive mode unless you really need not to'
	msg -- '' 'Options:'
	param TYPE  -t --type -- "Plugin type"
    param SHORTNAME  -s --shortname -- "Shortname of the plugin"
    param NAME  -n --name -- "Display name of the plugin"
    param FEATURES  -f --features -- "Comma separated list of features (see mudrd8mz/moodle-tool_pluginskel)"
    flag PRIVACY  -p --privacy -- "Generate 'Privacy related' classes"
    param MINVERSION -n --minversion -- "Minimum required moodle version"
    param RELEASE -r --release -- "Release name (x.x.x)"
    param VERSION -v --version -- "Version string of the plugin (YYYYMMDD00)"
    param MATURITY -m --maturity -- "Maturity string of the plugin"
    flag EDITMANUALLY -e --edit -- "Do not create the plugin, instead output the recipe file"
    flag GIT -g --git -- "Init a new git repository for the plugin"
    falg GRUNT -j --grunt -- "Create a Gruntfile.js"
    disp :usage  -h --help -- "Display this screen" 
}


#Create a new plugin using tool_pluginskel
mpdk_newplugin() {
    eval "$(getoptions mpdk_parser_definition_newplugin parse "$0")"
    parse "$@"
    #Sanity check
    #Check if the container is running
    mpdk_requirerunning
    #Get the dialog ENV if present use "dialog" as fallback
    dialog=${DIALOG:-dialog}
    #Output redirection required for use "dialog"
    output="3>&1 1>&2 2>&3 3>&-"   

    if [ -n "$NON_INTERACTIVE" ];then
        echo "WARNING: the inout is not validated, be carefull!"
        [ -z "$TYPE" ] && echo "Non interactive mode: privide a plugin type" && exit 1
        [ -z "$SHORTNAME" ] && echo "Non interactive mode: privide a component name" && exit 1
        [ -z "$NAME" ] && echo "Non interactive mode: privide name" && exit 1
        [ -z "$MINVERSION" ] && echo "Non interactive mode: privide a minimum required Moodle version" && exit 1
        [ -z "$RELEASE" ] && echo "Non interactive mode: privide a release name (x.x.x)" && exit 1
        [ -z "$VERSION" ] && echo "Non interactive mode: privide version string" && exit 1
        [ -z "$MATUTIRY" ] && echo "Non interactive mode: privide maturity string" && exit 1
    else
        #Show all the form
        TYPE="$(eval "$dialog $PLUGIN_TYPE_DIALOG $output")";
        SHORTNAME="$(eval "$dialog $PLUGIN_COMPONENT_NAME_DIALOG $output")";
        NAME="$(eval "$dialog  $PLUGIN_DISPLAY_NAME_DIALOG $output")";
        FEATURES="$(eval "$dialog $PLUGIN_FEATURES_DIALOG $output")";
        PRIVACY="$(eval "$dialog $PLUGIN_PRIVACY_DIALOG $output")";
        MINVERSION="$(eval "$dialog $PLUGIN_REQUIRES_VERSION_DIALOG $output")";
        RELEASE="$(eval "$dialog $PLUGIN_RELEASE_DIALOG $output")";
        VERSION="$(eval "$dialog $PLUGIN_VERSION_DIALOG $output")";
        MATUTIRY="$(eval "$dialog $PLUGIN_MATURITY_DIALOG $output")";
        EDITMANUALLY="$(eval "$dialog $PLUGIN_CREATE_DIALOG $output")";
    fi
    

    #Create "features" yaml part
    features_string="features:\n"
    recipename="$TYPE"_"$SHORTNAME";
    for f in $FEATURES; do
        features_string+="    $f: true \n"
    done

    #Create main yaml part (indentation is relevant) 
    yaml="
#Generated by mpdk script for tool_pluginskel
copyright: '$COPYRIGHT_STRING'
component: '$recipename'
release: $RELEASE
version: $VERSION
requires: '$MINVERSION'
maturity: $MATUTIRY
name: '$NAME'\n""$features_string"

    #Create privacy yaml part
    if [ "$PRIVACY" -eq 1 ]; then
        yaml+="privacy:\n    haspersonaldata: true\n"
    fi
    #If the user choose to continue editing the file manually, output it and exit 
    if [ "$EDITMANUALLY" -eq 1 ]; then
        clear
        printf "\nCopy your recipe:"
        printf "\n\n%s\n\n" "$yaml"
        exit 0
    fi

    if [ -z "$NON_INTERACTIVE" ];then
    #Ask the user if to create also a git repo
        git="$(eval "$dialog $PLUGIN_GIT_DIALOG $output")";
        grunt="$(eval "$dialog $PLUGIN_GRUNT_DIALOG $output")";
        clear
    fi
    #Create the yaml file and copy it in the moodle dir, so it's visible inside the conatiner
    printf "%s" "$yaml" > "$ASSET"/recipe/"$recipename".yaml
    cp "$ASSET"/recipe/"$recipename".yaml "$IROOT"/"$recipename".yaml
    #Execute tool_pluginskel generate.php
    result="$(mpdk_sh php admin/tool/pluginskel/cli/generate.php --target-moodle=/var/www/html /var/www/html/"$recipename".yaml)"
    rm "$IROOT"/"$recipename".yaml
    #Get the new plugin directory
    relpath="$(echo "$result" | sed "s+.*\/var\/www\/html++g")"
    [ -z "$relpath" ] && printf "\nSomething went wrong" && exit 1
    [ "${relpath:${#relpath}-1:1}" != '/' ] && relpath+='/'
    [ "${relpath:0:1}" = '/' ] && relpath="${relpath:1:${#relpath}}"
    plugindir=$IROOT"$relpath"
    #Get the warning and error from tool_pluginskel (warning are like useful advice)
    result="$(echo "$result" | sed "s+\[.\{32\}\].tool_pluginskel\.[A-Z]*:.+\n+g" | cut -f 1 -d "[")"
    #Check if we have a directory, otherwise something went wrong
    if [ -z "$plugindir" ];then 
        printf '\nAn error as occurred! Please try again...'
        exit 1
    fi
    #Create the git repository if requested by the user 
    if [ "$git" -eq 1 ]; then
        cd "$plugindir" || ( printf "\nSomething went wrong..." && exit 1)
        wget --quiet -O "$plugindir"/.gitignore "https://www.toptal.com/developers/gitignore/api/phpunit,phpstorm+all,macos,windows,linux,eclipse,visualstudiocode,netbeans,python,node,grunt,sublimetext,phpcodesniffer,composer" & mpdk_spinner $!
        git init --quiet
        git add .
        #Make the first commit
        git commit --quiet -m "Initial commit, plugin just generated with mpdk and pluginskel (auto)" 
    fi
    #Add a gruntfile
    clear
    if [ "$grunt" -eq 1 ];then
        printf '{\n    "name": "moodle-%s",\n    "private": true}' "$recipename" > "$plugindir"/package.json
        mpdk_sh "cd $relpath && npm install --save-dev grunt grunt-contrib-less grunt-contrib-watch grunt-load-gruntfile 1>/dev/null" & mpdk_spinner $!
        #Adjust the reference to the global gruntfile
        gruntpath="$(echo "$relpath" | sed -r "s#[A-Za-z0-9-]+#\.\.#g")"Gruntfile.js
        cat "$ASSET"/gruntfile | sed "s+%relpath%+$gruntpath+g" > "$plugindir"/Gruntfile.js
    fi
    #Save the entry in myplugins file
    mpdk_addplugin "$recipename" "$relpath"
    #Print the warnign and error from tool_pluginskel to the user
    
    printf "\n\n%s\n" "$result"
    printf "\nYour plugin is ready inside: %s, happy coding!\n" "$plugindir"
}


height=15
width=60
listheight=16
yesno='1 Yes 0 No'

PLUGIN_TYPE_DIALOG="$(cat <<EOF 
--radiolist "Select plugin type (Space select, Enter confirm)" $height $width $listheight 
"mod" "Activity module" ON
"tool" "Admin tool" OFF 
"gradingform" "Advanced grading method" OFF 
"antivirus" "Antivirus plugin" OFF 
"assignfeedback" "Assignment / Feedback plugin" OFF 
"assignsubmission" "Assignment / Submission plugin" OFF 
"assignment" "Assignment 2.2 (Disabled) / assignment" OFF 
"atto" "Atto HTML editor / Atto plugin" OFF 
"auth" "Authentication method" OFF 
"availability" "Availability restriction" OFF 
"block" "Block" OFF 
"booktool" "Book / Book tool" OFF 
"cachelock" "Cache lock handler" OFF 
"cachestore" "Cache store" OFF 
"calendartype" "Calendar type" OFF 
"contenttype" "contenttype" OFF 
"format" "Course format" OFF 
"coursereport" "Course report" OFF 
"customcertelement" "Custom certificate / customcertelement" OFF 
"customfield" "Custom field" OFF 
"dataformat" "Data format" OFF 
"datafield" "Database / Database field type" OFF 
"datapreset" "Database / Preset" OFF 
"fileconverter" "Document converter" OFF 
"editor" "Editor" OFF 
"enrol" "Enrolment method" OFF 
"ltiservice" "External tool / LTI service" OFF 
"ltisource" "External tool / LTI source" OFF 
"forumreport" "Forum / forumreport" OFF 
"grade" "Grade  method" OFF 
"gradeimport" "Grade import method" OFF 
"gradereport" "Gradebook report" OFF 
"h5plib" "H5P framework" OFF 
"local" "Local plugin" OFF 
"logstore" "Log store manager / Log store" OFF 
"mlbackend" "Machine learning backend" OFF 
"media" "Media player" OFF 
"metadatacontext" "Metadata / Data context plugin" OFF 
"metadatafieldtype" "Metadata / Data fieldtype plugin" OFF 
"mnetservice" "MNet service" OFF 
"message" "Notification plugin" OFF 
"plagiarism" "Plagiarism plugin" OFF 
"portfolio" "Portfolio" OFF 
"profilefield" "Profile field type" OFF 
"qbehaviour" "Question behaviour" OFF 
"qformat" "Question import/ format" OFF 
"qtype" "Question type" OFF 
"quizaccess" "Quiz / Access rule" OFF 
"quiz" "Quiz / Report" OFF 
"repository" "Repository" OFF 
"scormreport" "SCORM package / Report" OFF 
"search" "Search engine" OFF 
"report" "Site report" OFF 
"filter" "Text filter" OFF 
"theme" "Theme" OFF 
"tinymce" "TinyMCE HTML editor / Plugin" OFF 
"webservice" "Webservice protocol" OFF 
"workshopeval" "Workshop / Grading evaluation method" OFF 
"workshopform" "Workshop / Grading strategy" OFF 
"workshopallocation" "Workshop / Submissions allocation method" OFF 
EOF
)"

 PLUGIN_COMPONENT_NAME_DIALOG="--inputbox \"Component name\" $height $width"
 PLUGIN_DISPLAY_NAME_DIALOG="--inputbox \"Display name\" $height $width"


 PLUGIN_FEATURES_DIALOG="$(cat <<EOF 
 --checklist "Select features (Space select, Enter confirm)" $height $width $listheight  
"install" "db/install.php" ON 
"uninstall" "db/uninstall.php" OFF 
"settings" "settings.php" ON 
"readme" "README.md" ON 
"license" "LICENSE.md" OFF 
"upgrade" "db/upgrade.php" OFF 
"upgradelib" "db/upgradelib.php" OFF 
EOF
)"


PLUGIN_PRIVACY_DIALOG="--menu \"Does your plugin store personal user data?\" $height $width $listheight $yesno"

 PLUGIN_REQUIRES_VERSION_DIALOG="$(cat <<EOF 
--radiolist "Select a minimium required moodle verion (Space select, Enter confirm)" $height $width $listheight 
"2021051700" "3.11" ON 
"2020110900" "3.10" OFF 
"2020061500" "3.9" OFF 
"2019111800" "3.8" OFF 
"2019052000" "3.7" OFF 
"2018120300" "3.6" OFF 
"2018051700" "3.5" OFF 
"2017111300" "3.4" OFF 
"2017051500" "3.3" OFF 
"2016120500" "3.2" OFF 
"2016052300" "3.1" OFF 
"2015111600" "3.0" OFF 
"2015051100" "2.9" OFF 
"2014111000" "2.8" OFF 
"2014051200" "2.7" OFF 
"2013111800" "2.6" OFF 
"2013051400" "2.5" OFF 
"2012120300" "2.4" OFF 
"2012062500" "2.3" OFF 
"2011120500" "2.2" OFF 
EOF
)"

 PLUGIN_RELEASE_DIALOG="--inputbox \"Plugin release\" $height $width 0.1.0"
 PLUGIN_VERSION_DIALOG="--inputbox \"Plugin version\" $height $width $(date +'%Y%m%d')00"


 PLUGIN_MATURITY_DIALOG="$(cat <<EOF
--checklist "Select maturiy level (Space select, Enter confirm)" $height $width $listheight  
"MATURITY_ALPHA" "MATURITY_ALPHA" ON 
"MATURITY_BETA" "MATURITY_BETA" OFF 
"MATURITY_RC" "MATURITY_RC" OFF 
"MATURITY_STABLE" "MATURITY_STABLE" OFF 
EOF
)"

#TODO
#PLUGIN_CLI_DIALOG="--inputmenu \"Add cli script? (edit the name to add)\" $height $width $listheight 1 '' 2 '' 3 '' 4 '' 5 '' "

PLUGIN_CREATE_DIALOG="--menu \"How do you want to continue?\" $height $width $listheight  2 \"Create the plugin now\" 1 \"Edit the recipe manualy\""
PLUGIN_GIT_DIALOG="--menu \"Initialize a GIT repository?\" $height $width $listheight $yesno"
PLUGIN_GRUNT_DIALOG="--menu \"Initialize GRUNT for this plugin?\" $height $width $listheight $yesno"

