# Copyright (C) 2022 Mattia Bonzi <mattia@mattiabonzi.it>
# 
# This file is part of Mpdk.
# 
# Mpdk is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Mpdk is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Mpdk.  If not, see <http://www.gnu.org/licenses/>.

mpdk_parser_definition_stop() {
	setup   OARGS help:usage abbr:true -- '' "Usage: mpdk stop [Options...]"
	msg -- 'Stop the instance (docker-compose stop)'
	msg -- '' 'Options:'
    flag ALL -a --all -- "Stop all running instance"
	disp :usage  -h --help -- "Display this screen" 
}

mpdk_parser_definition_down() {
	setup   OARGS help:usage abbr:true -- '' "Usage: mpdk down [Options...]"
	msg -- 'Discard the instance  (docker-compose down)'
	msg -- '' 'Options:'
    flag ALL -a --all -- "Discard all running instance"
    flag FORCE -f --force -- "Don't ask for confirmation (incompatible with -a)"
	disp :usage  -h --help -- "Display this screen"
}

mpdk_parser_definition_remove() {
	setup   OARGS help:usage abbr:true -- '' "Usage: mpdk remove [Options...]"
	msg -- "Remove the instance's codebase (use only on stopped instance)"
	msg -- '' 'Options:'
    flag ALL -a --all -- "Remove all stopped instance"
    flag FORCE -f --force -- "Don't ask for confirmation (incompatible with -a)"
	disp :usage  -h --help -- "Display this screen" 
}


mpdk_stop() {
    #Parse local options
    eval "$(getoptions mpdk_parser_definition_stop parse "$0")"
    parse "$@"
    [ -n "$FORCE" ] && FORCE="-f"
    mpdk_downstopremove -s "$FORCE"
}

mpdk_down() {
    #Parse local options
    eval "$(getoptions mpdk_parser_definition_down parse "$0")"
    parse "$@"
    [ -n "$FORCE" ] && FORCE="-f"
    [ -n "$ALL" ] && ALL="-a"
    mpdk_downstopremove -d "$FORCE"
}

mpdk_remove() {
    #Parse local options
    eval "$(getoptions mpdk_parser_definition_remove parse "$0")"
    parse "$@"
    [ -n "$FORCE" ] && FORCE="-f"
    [ -n "$ALL" ] && ALL="-a"
    mpdk_downstopremove -s "$FORCE"
}


#Stop the instance and delete the volume (persisted data)
mpdk_downstopremove() {
    #Parse local options
    force=0;all=0;stop=0;remove=0;
    local OPTIND
    while getopts "arsf" options; do
        case "${options}" in
            a ) all=1;force=1;;
            r ) remove=1;force=0;;
            s ) stop=1;force=1;;
            f ) force=1;;
            * ) echo "Something went wrong" && exit
        esac
    done
    #If not "-f" (force) ask confirmation to the user
    if [ $force -eq 0 ]; then
        instance=$(basename "$(dirname "$IROOT")")
        msg="$( [ $remove -eq 1 ] && echo 'and ALL THE CODE' || echo '(not the code)')"
        q="Are you sure? All the data $msg of the instance '$instance' will be lost forever, do you want to continue? (y/n) : "
        mpdk_confirmation  "$q" "Aborting..., use \"stop\" to stop the instance without losing data"
    fi
    #If -a (all) down/remove/stop all the instances
    if [ $all -eq 1 ];then
        printf "You will be asked to confirm for each instance...\n"
        ilist="$(ls "$MPDK_ROOT")"
        msg='Nothing to do...'
        for instance in $ilist;do
            [ ! -f "$MPDK_ROOT/$instance/moodle/.mpdkinstance" ] && continue
            if [ $stop -eq 1 ];then
                [ -z "$(mpdk_isrunning "$(mpdk -n "$instance "ps)")" ] && continue
                mpdk -n "$instance" stop
                msg='\nAll instances have been stopped'
            elif [ $remove -eq 1 ];then
                mpdk -n "$instance" remove
                msg='\nAll not-running instances have been deleted!'
            else
                [ ! -f "$MPDK_ROOT/$instance/moodle/.init" ] && continue
                mpdk -n "$instance" down
                msg='\nAll instances have been taken down'
            fi
        done
        printf "%s" "$msg"
    else
        #Down/remove/stop this instance
        [ -z $IROOT ] && echo "An instance must be defined, use -a for all or specify one" && exit 1
        mpdk_requireinstance
        if [ $stop -eq 1 ];then
            mpdk_requirerunning
            "$ASSET"/moodle-docker/bin/moodle-docker-compose stop
        elif [ $remove -eq 1 ];then
            if [ -n "$(mpdk_isinit)" ];then
                "Cannot delete the instance, run 'mpdk down' first"
                exit 1
            fi
            rm -rf "$IROOT" & mpdk_spinner $!
        else
            mpdk_requireinit
            "$ASSET"/moodle-docker/bin/moodle-docker-compose down 
            rm $IROOT.init
        fi
    fi
}
