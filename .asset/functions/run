# Copyright (C) 2022 Mattia Bonzi <mattia@mattiabonzi.it>
# 
# This file is part of Mpdk.
# 
# Mpdk is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Mpdk is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Mpdk.  If not, see <http://www.gnu.org/licenses/>.



mpdk_parser_definition_run() {
	setup   OARGS help:usage abbr:true -- '' "Usage: mpdk ps [Options...]"
	msg -- 'Run (and init if necessary) the instance'
    msg -- "Once an instance has been initialized, it's no more necessary to use '-tbd'"
	flag DEV  -d --dev -- "Init (if necessary) as development instance (default, only useful in combination with -t or -b)"
    flag PHPUNIT -t --phpunit -- "Init (if necessary) as PhpUnit test instance"
    flag BEHAT -b --behat -- "Init (if necessary) as Behat test instance"
    param WEBPORT -p --webport init:=8000 -- "  Specify the web port"
    param DBPORT -P --dbport init:=8001 -- "Specify the db port"
    flag SAVE -s --save -- "Save the information for the next run (Port, Open)"
    flag OPEN -o --open -- "Open a browser at the end (only dev instances)"
	disp :usage  -h --help -- "Display this screen"

}

#Start an instance (docker-compose up)
mpdk_run() {
    #Parse local options
    eval "$(getoptions mpdk_parser_definition_run parse "$0")"
    parse "$@"
    #Sanity check
    [ -z "$IROOT" ] && printf "\nA path to the instance is reuiqred" && exit 1
    portmessage="port is not free, choose another one or stop the service using this port: "
    [ -n "$(lsof -i tcp:"$WEBPORT" -s tcp:listen)" ] && printf "\nWeb $portmessage %s" "$WEBPORT" && exit
    [ -n "$(lsof -i tcp:"$DBPORT" -s tcp:listen)" ] && printf "\nDatabase $portmessage %s" "$DBPORT" && exit
    #Export web/db port ENV for moodle-docker
    export MOODLE_DOCKER_WEB_PORT="${WEBPORT:-MOODLE_DOCKER_WEB_PORT}"
    export MOODLE_DOCKER_DB_PORT="${DBPORT:-MOODLE_DOCKER_DB_PORT}"
    #Use the config.php file bundled with moodle-docker
    cp "$ASSET/moodle-docker/config.docker-template.php" "$IROOT/config.php"
    #Compose up 
    "$ASSET/moodle-docker/bin/moodle-docker-compose" --ansi never up -d >> "$MPDK_LOGFILE" 2>&1 
   
    #Wait for DB (maybe useless for pgsql, here for safety)
    "$ASSET"/moodle-docker/bin/moodle-docker-wait-for-db >> "$MPDK_LOGFILE" 2>&1 
    #Install moodle if necessary
    [[  -n "$DEV"  ]] && DEV='-d'
    [[  -n "$PHPUNIT"  ]] && PHPUNIT='-t'
    [[  -n "$BEHAT"  ]] && BEHAT='-b'
    mpdk_init "$DEV" "$PHPUNIT" "$BEHAT"
    #Save information for the nexr run
    if [ -n "$SAVE" ];then
        printf "export MOODLE_DOCKER_WEB_PORT='$WEBPORT'\nexport MOODLE_DOCKER_DB_PORT='$DBPORT'" > "$IRROT/../env";
    fi
    #Show "docker ps" to the user
    "$ASSET"/moodle-docker/bin/moodle-docker-compose ps
    #Mark as initialized
    mpdk_success "Piattaforma online http://localhost:$MOODLE_DOCKER_WEB_PORT"
    mpdk_info "User: admin   |    Passowrd: admin"    
    #Open the browser only if it's a devinstance
    if [  -n "$DEV"  ] && [ -n "$OPEN" ]; then
        sleep 1
        open  http://localhost:"$MOODLE_DOCKER_WEB_PORT"
    fi
}